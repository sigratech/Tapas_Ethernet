function app_types(command)


  aAppEnumAvailable = {};
  % Enums

%   Simulink.defineIntEnumType('SYS_State_t', ... 
%   {'None','ACC','Off','On', 'Charging','Fault','Allow2drive', 'WtdReset'}, ... 
%   [0;1;2;3;4;5;6;7],...
%   'Description', 'enum for System States', ...
%   'DefaultValue', 'None', ...
%   'AddClassNameToEnumNames', true);
%   aAppEnumAvailable = [aAppEnumAvailable; 'SYS_State_t'];

  
  Simulink.defineIntEnumType('Relay_t', ... 
  {'Open','Close'}, ... 
  [0;1],...
  'Description', 'enum for relay state', ...
  'DefaultValue', 'Open', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'Relay_t'];
  

%%%%%%%%%%%

   %Key positions
  Simulink.defineIntEnumType('KEY_Positions_t', ... 
  {'none','Off','Acc','On','Allow2drive','Fault'}, ... 
  [0;1;2;3;4;5],...
  'Description', 'enum for describing start key position', ...
  'DefaultValue', 'none', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'KEY_Positions_t'];
  
  %FLT_SystemErrorSeverity - Falult Manager error severity levels
  Simulink.defineIntEnumType('FLT_SystemErrorSeverity_t', ... 
  {'NoError','Warning','FaultLevel1','FaultLevel2'}, ... 
  [0;1;2;3],...
  'Description', 'enum for describing system error faults', ...
  'DefaultValue', 'NoError', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'FLT_SystemErrorSeverity_t'];
  
  %MgrStates_t - Each Manager should have this state machine
  Simulink.defineIntEnumType('MgrStates_t', ... 
  {'None','Off','Init','Run','Deinit','Fault'}, ... 
  [0;1;2;3;4;5],...
  'Description', 'enum for describing manager state', ...
  'DefaultValue', 'None', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'MgrStates_t'];          
  
      
  %GER_GearState_t - Gear position
  Simulink.defineIntEnumType('GER_GearState_t', ... 
  {'None','Idle','Backward','Forward','Fault'}, ... 
  [0;1;2;3;4],...
  'Description', 'enum for describing manager state', ...
  'DefaultValue', 'None', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'GER_GearState_t'];          
  
     
  %SYS_CarStatus_t - Car status
  Simulink.defineIntEnumType('SYS_CarStatus_t', ... 
  {'None','OFF','ACC','On','Charging','Allow2drive'}, ... 
  [10;16;32;48;80;96],...
  'Description', 'enum for describing car status', ...
  'DefaultValue', 'None', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'SYS_CarStatus_t'];   
          
  %SYS_MgrRunState_t - Car status
  Simulink.defineIntEnumType('SYS_MgrRunState_t', ... 
  {'None','Driving','Charging','Idle'}, ... 
  [0;1;2;3],...
  'Description', 'enum for describing car status', ...
  'DefaultValue', 'None', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'SYS_MgrRunState_t'];   
          
    %CHR_RunMode_t - Charging substare
  Simulink.defineIntEnumType('CHR_RunMode_t', ... 
  {'None','NotPlugged','AC','DC','AcAndDcPlugged'}, ... 
  [0;1;2;3;4],...
  'Description', 'enum for describing Charging substare', ...
  'DefaultValue', 'None', ...
  'AddClassNameToEnumNames', true);
  aAppEnumAvailable = [aAppEnumAvailable; 'CHR_RunMode_t'];   
      
  
  
  disp('APP Types Loaded ...');
  
  %% Display
  if(strcmp(command,'display'))
    disp('APP Types Available:');
    for index=1:length(aAppEnumAvailable)
      disp(aAppEnumAvailable{index});
    end
  end
end